<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">
<html>
  <head>
    <title>Ghidra Bundles</title>
    <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
    <link rel="stylesheet" type="text/css" href="../../shared/Frontpage.css">
  </head>
  <body lang="EN-US">
    <h1>Ghidra Bundles</h1> 

    <h2>Dynamic modules</h2> 
    <p> Scripting brings a poweful form of dynamic extensibilty to Ghidra,
    where Java source code is (re)compiled, loaded, and run without exiting
    Ghidra.  When a script grows large or requires external dependencies, it
    might be worth the effort think of how to split up code into sensible
    pieces, or <em>modules</em>.</p>

    <p>To support modularity while preserving the dynamic nature of scripts,
    Ghidra uses <a href="https://www.osgi.org">OSGi</a>.  Without delving too
    much into terminology, the key things to know are </p>
    <ol style="padding-left:8em">
      <li>The unit of modularity in OSGi is the <em>bundle</em>.  Bundles are
        <em>mostly independent</em> components with well-defined
        collaborations.
      </li>

      <li>Concretely, a bundle is a Jar file with extra metadata in its
        manifest file that tells the framework what it uses and what it
        provides.</li>

      <li>Bundles can <em>export</em> Java packages for use by other bundles,
        and packages can have version numbers assigned.</li>

      <li>Bundles can <em>import</em> packages from other bundles, and each
        import can be constrained by version number or range.</li>

      <li>Bundles are Jars, but Ghidra will automatically compile source
        directories to bundles.  We refer to source directories intended to be
        used in OSGi as <a href="BundleManager.htm#sourceBundles"> <em>source
            bundles</em></a>. <em>In particular</em> Ghidra script directories
        are source bundles.

      <li>The entire Ghidra API is part of the "system bundle", so hosted
        bundles have complete access.</li>

    </ol>


    <h2><a name="sourceBundles"/>Source bundles</h2> 
    <p>When a directory is added to the Bundle Manager, it is treated as a
    <em>source bundle</em>. When enabled, its Java contents are compiled to <br>
    &nbsp;&nbsp;&nbsp;&nbsp;<code>&lt;user home&gt;/.ghidra/.ghidra-&lt;version&gt;/osgi/compiled-bundles/&lt;hash&gt;</code>, <br>
    where <code>&lt;hash&gt;</code> is a hash of the source bundle location.</p>
    <h3>exploded bundles</h3>
    <p>
    Each subdirectory of <code>compiled-bundles/</code> is an <em>exploded
      jar</em> --  by compressing it, we get a standard Jar bundle:
    </p>
    <code>
      <pre>
            jar cMf mybundle.jar -C $HOME/.ghidra/.ghidra_&lt;version&gt;/osgi/compiled-bundles/&lt;hash&gt;  .
      </pre>
    </code>
    <p>
    <code>mybundle.jar</code> could then be shared in binary form. 
    </p>

    <h3><a name="generated_files"/>generated files</h3>
    <p>If there is no manifest in the source directory, Ghidra generates one
    using <a href="https://bnd.bndtools.org/">bndlib</a> so that:
    </p>
    <ul style="padding-left:8em">
      <li>Every package is exported unless it contains <code>private</code> or <code>internal</code> in its name.</li>
      <li>Currently active bundles satisfying <code>@importpackage</code> requirments made available for import.</li>
      <li>Every package from Ghidra core is available for import. (Ghidra's core API is part of the system bundle)</li>
    </ul>
    <p>
      If no bundle activator is present, a stub is created and referenced in the generated manifest.
    </p>

    <h2><a name="dependency"/>Dependency</h2> 
    <p>Two types of code dependency are available when developing with OSGi, intra-bundle and
    inter-bundle.</p>

    <h3>intra-bundle (<em>compile time</em>) dependency</h3>
    <p>Classes within a bundle, e.g. source files in a source bundle, can rely one another with
    Java's usual package <code>import</code>.</p> <p>This kind of dependency is resolved at
    compile time -- if a class isn't imported or present, compilation will fail!</p>

    <h3>inter-bundle (<em>run time</em>) dependency</h3>
    <p>To make use of code from <em>other</em> bundles, a bundle must declare its
    requirements.  When a bundle is activated, the framework attempts to
    <em>resolve</em> its declared dependencies against active bundles.  The
    first match, in the order those bundles were activated, will be "wired" to
    the dependent.</p>

    <p>Note: OSGi bundle dependency is very similar to Java 9 modules, except
    that Java 9 modules provide <em>load time</em> resolution.</p>

    <p>Via the Jar manifest, there are multiple ways to configure the
    requirements of a bundle.  We'll describe only one, the
    <code>Import-Package</code> attribute, because Ghidra provides a shortcut
    which we'll describe afterwards.</p>

    <h4><code>Import-Package</code> in the manifest</h4>
    <p>You can find a high level description of OSGi at <a href="https://osgi.org">https://osgi.org</a> and details 
    <a href="https://osgi.org/specification/osgi.core/7.0.0/framework.module.html#framework.module.importpackage">
      here
    </a>.

    <p>Examples of the syntax for common cases are below:</p>
    <code>
    <pre>
          Import-Package:com.example.stuff
          Import-Package:com.example.stuff;version=1.2.3
          Import-Package:com.example.stuff;version="[1.2.0,1.3)"
          Import-Package:com.example.stuff,org.example.otherstuff
          Import-Package:com.example.stuff;version="[1.2.0,1.3)",org.example.otherstuff
          Import-Package:com.example.stuff;version="[1.2.0,1.3)",org.example.otherstuff;version=2.3.4
    </pre>
    </code>
    <p>Note: the file <code>META-INF/MANIFEST.MF</code> should have only <em>one</em>
    <code>Import-Package</code> entry.</p>



    <h4><code>@importpackage</code> in source</h4>
    <p>If a source bundle includes a file <code>META-INF/MANIFEST.MF</code>, it will be used as
    the bundle's manifest.  If not, a manifest will be generated, see <a
    href="#generated_files">above</a>.</p>

    <p>Ghidra provides a shortcut to populate <code>Import-Package</code>, the
    <code>@importpackage</code> metadata tag.  The <code>@importpackage</code> values from all
    source files in the root of a source bundle are appended to the generated manifest's
    <code>Import-Package</code> attribute.</p>


    <h2><a name="EnableBundles"/><a name="DisableBundles"/>Enabling and disabling bundles</h2>
    <p>For a bundle's contents to be available (e.g. for loading classes), its <a
    href="https://docs.osgi.org/specification/osgi.core/7.0.0/framework.lifecycle.html#d0e9143">
    OSGi state</a> must be "<code>ACTIVE</CODE>".  Ghidra generally takes care of this, but
    the following provides more details about the underlying OSGi for debugging.</p>

    <p>Ghidra activates a bundle when added, enabled, or when a script contained within is
    run.<p>

    <p>When enabled, the root directory of a source bundle is also scanned for Ghidra scripts
    and any found are added to the script manager.</p>

    <p>When <em>dis</em>abled, any dependents of a bundle are stopped/deactivated first, then
    the bundle itself is stopped. Its scripts are then removed from the script manager.</p>

    <p>The color of each bundle path reflects state as follows:</p>
    <ul style="padding-left:8em">
      <li> <span style="font-weight:bold;color:red">error</span> - e.g. the bundle file is missing
      <li> <span style="font-weight:bold;color:#404040">disabled</span> - Ghidra knows the
        path, but that's it
      <li> <span style="font-weight:bold;color:black">inactive</span> - scripts are visible in the script
        manager, but no classes are loaded.  A bundle moves into this state when its
        dependencies become inactive (e.g. by being disabled), one of its scripts is deleted, or its cache is <a
        href="#CleanBundles">cleaned</a>
      <li> <span style="font-weight:bold;color:#009900">active</span> - the bundle is built and classes within
        can be loaded
    </ul>

    <p>The normally hidden column "OSGi State" is also available.  In addition to the Bundle
    state, this column will report</p>
    <ul style="padding-left:8em">
      <li> (DISABLED) - if the bundle is disabled
      <li> (ENABLED) - if the bundle is enabled, but the bundle manager has no handle to it.
        If this state persists, there is likely an internal error
      <li> (UNINSTALLED) - if the bundle is enabled, but the framework has released its handle.
        This is typical for an inactive bundle
    </ul>


    <h2><a name="AddBundles"/><a name="RemoveBundles"/>Adding and removing bundles from the manager</h2>
    <p>Adding a directory to the bundle manager will also enable it, so scripts within become
    available in the script manager.</p>

    <p>Removing a bundle disables it, so its scripts will be removed from the script manager
    and its dependents will become inactive.</p>


    <h2><a name="CleanBundles"/>Cleaning bundles</h2>
    <p>When Ghidra builds a source bundle, the results are written to the
    directory <br>
    &nbsp;&nbsp;&nbsp;&nbsp;<code>&lt;user home&gt;/.ghidra/.ghidra-&lt;version&gt;/osgi/compiled-bundles/&lt;hash&gt;</code>. <br>
    These files can then be loaded by the OSGi framework.</p>

    <p>A <em>clean</em> deactivates then wipes this subdirectory for each selected bundle and
    clears its build summary.</p>

    <p>If a source bundle's imports aren't available during build, some source files can
    produce errors.  In order to force Ghidra to recompile, one must either modify the files
    with errors or <em>clean</em> the bundle then re-enable.</p>


  </body>
</html>
